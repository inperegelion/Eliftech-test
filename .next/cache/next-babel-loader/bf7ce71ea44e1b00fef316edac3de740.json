{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\projects\\\\Eliftech\\\\components\\\\Orders\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass Orders extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      orders: [],\n      linesOnPage: 10,\n      currentPage: 0,\n      totalSize: undefined,\n      sortBy: \"user_email\"\n    });\n\n    _defineProperty(this, \"fetchOrders\", () => {\n      const ordersQuery = `?from=${Number(this.state.currentPage * this.state.linesOnPage) //\n      }&to=${Number((this.state.currentPage + 1) * this.state.linesOnPage) //\n      }&sortBy=${this.state.sortBy}`;\n      fetch(`http://localhost:3001/get-orders${ordersQuery}`).then(res => res.json()).then(res => {\n        this.setState(state => _objectSpread({}, state, {\n          orders: res.orders,\n          totalSize: res.totalSize\n        }));\n        console.log(\"ORDERS RECEIVED: \", res, this.state);\n      });\n      console.log(\"FETCH ORDERS BEEN SENT\", ordersQuery, this.state);\n    });\n\n    _defineProperty(this, \"changePage\", step => {\n      const newPage = this.state.currentPage + step;\n      if ( // check if page in borders\n      newPage >= 0 && newPage + step <= this.state.totalSize / this.state.linesOnPage + 1) this.setState(prevState => ({\n        currentPage: newPage\n      }), newState => {\n        console.log(\"NOW PAGE SET TO:\", this.state.currentPage);\n        this.fetchOrders();\n      });\n    });\n\n    _defineProperty(this, \"setSorting\", colName => {\n      this.setState({\n        sortBy: colName\n      }, newState => {\n        this.fetchOrders();\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.fetchOrders();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Orders:\"), __jsx(\"button\", {\n      onClick: this.fetchOrders,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Refresh\"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      onClick: () => this.changePage(-1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"<\"), __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.state.currentPage + 1), __jsx(\"button\", {\n      onClick: () => this.changePage(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \">\")), __jsx(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(\"th\", {\n      onClick: () => this.setSorting(\"user_email\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"user_email\"), __jsx(\"th\", {\n      onClick: () => this.setSorting(\"date\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"date\"), __jsx(\"th\", {\n      onClick: () => this.setSorting(\"value\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"value\"), __jsx(\"th\", {\n      onClick: () => this.setSorting(\"currency\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"currency\"), __jsx(\"th\", {\n      onClick: () => this.setSorting(\"status\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"status\"))), __jsx(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.orders.map((order, key) => __jsx(\"tr\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, order.user_email), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, order.date), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, order.value), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, order.currency), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, order.status))))));\n  }\n\n}\n\nexport default Orders;","map":{"version":3,"sources":["C:/Users/user/projects/Eliftech/components/Orders/index.js"],"names":["Orders","React","Component","orders","linesOnPage","currentPage","totalSize","undefined","sortBy","ordersQuery","Number","state","fetch","then","res","json","setState","console","log","step","newPage","prevState","newState","fetchOrders","colName","componentDidMount","render","changePage","setSorting","map","order","key","user_email","date","value","currency","status"],"mappings":"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","sourcesContent":["class Orders extends React.Component {\r\n  state = {\r\n    orders: [],\r\n    linesOnPage: 10,\r\n    currentPage: 0,\r\n    totalSize: undefined,\r\n    sortBy: \"user_email\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchOrders();\r\n  }\r\n\r\n  fetchOrders = () => {\r\n    const ordersQuery = `?from=${\r\n      Number(this.state.currentPage * this.state.linesOnPage) //\r\n    }&to=${\r\n      Number((this.state.currentPage + 1) * this.state.linesOnPage) //\r\n    }&sortBy=${this.state.sortBy}`;\r\n\r\n    fetch(`http://localhost:3001/get-orders${ordersQuery}`)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        this.setState(state => ({\r\n          ...state,\r\n          orders: res.orders,\r\n          totalSize: res.totalSize,\r\n        }));\r\n        console.log(\"ORDERS RECEIVED: \", res, this.state);\r\n      });\r\n    console.log(\"FETCH ORDERS BEEN SENT\", ordersQuery, this.state);\r\n  };\r\n\r\n  changePage = step => {\r\n    const newPage = this.state.currentPage + step;\r\n    if (\r\n      // check if page in borders\r\n      newPage >= 0 &&\r\n      newPage + step <= this.state.totalSize / this.state.linesOnPage + 1\r\n    )\r\n      this.setState(\r\n        prevState => ({ currentPage: newPage }),\r\n        newState => {\r\n          console.log(\"NOW PAGE SET TO:\", this.state.currentPage);\r\n          this.fetchOrders();\r\n        }\r\n      );\r\n  };\r\n\r\n  setSorting = colName => {\r\n    this.setState({ sortBy: colName }, newState => {\r\n      this.fetchOrders();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Orders:</h3>\r\n        <button onClick={this.fetchOrders}>Refresh</button>\r\n        <div>\r\n          <button onClick={() => this.changePage(-1)}>{\"<\"}</button>\r\n          <span>{this.state.currentPage + 1}</span>\r\n          <button onClick={() => this.changePage(1)}>{\">\"}</button>\r\n        </div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th onClick={() => this.setSorting(\"user_email\")}>user_email</th>\r\n              <th onClick={() => this.setSorting(\"date\")}>date</th>\r\n              <th onClick={() => this.setSorting(\"value\")}>value</th>\r\n              <th onClick={() => this.setSorting(\"currency\")}>currency</th>\r\n              <th onClick={() => this.setSorting(\"status\")}>status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.orders.map((order, key) => (\r\n              <tr key={key}>\r\n                <td>{order.user_email}</td>\r\n                <td>{order.date}</td>\r\n                <td>{order.value}</td>\r\n                <td>{order.currency}</td>\r\n                <td>{order.status}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Orders;\r\n"]},"metadata":{},"sourceType":"module"}